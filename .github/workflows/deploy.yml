name: Deploy FastAPI and React App to Elastic Beanstalk

on:
  push:
    branches:
      - main
  repository_dispatch:
    types: [deploy_backend]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ap-northeast-3
      ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
      ECR_REPOSITORY: smartspeztech
      IMAGE_TAG: ${{ github.sha }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Download React Build from S3
        run: |
          aws s3 sync s3://smartspeztech/react-build ./frontend/build

      - name: Copy React build to static folder
        run: |
          mkdir -p static
          cp -r frontend/build/* static/
          echo "Files in frontend/build:"
          ls -la frontend/build/
          echo "Files in static:"
          ls -la static/

      - name: Debug - List directory contents
        run: |
          echo "Current directory:"
          pwd
          echo "Directory contents:"
          ls -R

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Deploy to Elastic Beanstalk
        run: |
          pip install awsebcli
          eb init -p docker smartspeztech --region ${{ secrets.AWS_REGION }}
          eb use smartspeztech
          eb setenv OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}"
          eb deploy --staged

      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"
